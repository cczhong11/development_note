{"pageProps":{"note":{"id":"650a5541-05cb-4941-a2d9-38619f0c11cb","title":"Graphsearch","vault":{"fsPath":"repos/dendron-aws-vault","remote":{"type":"git","url":"https://github.com/cczhong11/my_note.git"},"name":"my_note"},"type":"note","desc":"","links":[{"from":{"fname":"development.algo","id":"400115e9-30f7-4a13-9776-db059bc9cd42","vaultName":"my_note"},"type":"backlink","position":{"start":{"line":23,"column":3,"offset":482},"end":{"line":23,"column":39,"offset":518},"indent":[]},"value":"development.algo.graphsearch"}],"anchors":{"bfs":{"type":"header","value":"bfs","line":9,"column":0},"dfs":{"type":"header","value":"dfs","line":43,"column":0},"最短路径算法":{"type":"header","value":"最短路径算法","line":72,"column":0},"a":{"type":"header","value":"a","line":100,"column":0}},"fname":"development.algo.graphsearch","updated":1615876576245,"created":1615875097110,"parent":"400115e9-30f7-4a13-9776-db059bc9cd42","children":[],"data":{},"custom":{},"contentHash":"ff245449a22802e46cc1eb73b3f6cc62"},"body":"<h1 id=\"graphsearch\">Graphsearch<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#graphsearch\"></a></h1>\n<h1 id=\"bfs\">BFS<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#bfs\"></a></h1>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">BFS</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n \n    <span class=\"token comment\"># Mark all the vertices as not visited</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>graph<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Create a queue for BFS</span>\n    queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># Mark the source node as </span>\n    <span class=\"token comment\"># visited and enqueue it</span>\n    queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    visited<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># Dequeue a vertex from </span>\n        <span class=\"token comment\"># queue and print it</span>\n        s <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Get all adjacent vertices of the</span>\n        <span class=\"token comment\"># dequeued vertex s. If a adjacent</span>\n        <span class=\"token comment\"># has not been visited, then mark it</span>\n        <span class=\"token comment\"># visited and enqueue it</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>graph<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n                queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n \n\n</code></pre>\n<h1 id=\"dfs\">DFS<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dfs\"></a></h1>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">DFSUtil</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n \n    <span class=\"token comment\"># Mark the current node as visited</span>\n    <span class=\"token comment\"># and print it</span>\n    visited<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n \n    <span class=\"token comment\"># Recur for all the vertices</span>\n    <span class=\"token comment\"># adjacent to this vertex</span>\n    <span class=\"token keyword\">for</span> neighbour <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>graph<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> neighbour <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>DFSUtil<span class=\"token punctuation\">(</span>neighbour<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\"># The function to do DFS traversal. It uses</span>\n<span class=\"token comment\"># recursive DFSUtil()</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">DFS</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># Create a set to store visited vertices</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Call the recursive helper function</span>\n    <span class=\"token comment\"># to print DFS traversal</span>\n    self<span class=\"token punctuation\">.</span>DFSUtil<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h1 id=\"最短路径算法\">最短路径算法<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#最短路径算法\"></a></h1>\n<p>单点最短路径算法： bellman-ford 算法，基本思路就是每次更新从起点到v的距离，如果起点到u再到v的路程短，那么就更新。</p>\n<pre><code> for i from 1 to size(vertices)-1:\n       for each edge (u, v) with weight w in edges:\n           if distance[u] + w &#x3C; distance[v]:\n               distance[v] := distance[u] + w\n</code></pre>\n<p>Dijkstra’s 算法，这也是单点最短路径算法，基本思路是每次从q中取最小的节点，之后更新从该点到其他的点的距离。</p>\n<pre><code>function Dijkstra(G, w, s)\n    for each vertex v in V[G]        // 初始化\n           d[v] := infinity           // 將各點的已知最短距離先設成無窮大\n    d[s] := 0                        // 因为出发点到出发点间不需移动任何距离，所以可以直接将s到s的最小距离设为0\n     S := empty set\n     Q := set of all vertices\n     while Q is not an empty set      // Dijkstra演算法主體\n        u := Extract_Min(Q)\n        S.append(u)\n        for each edge outgoing from u as (u,v)\n            if d[v] > d[u] + w(u,v)  // 拓展边（u,v）。w(u,v)为从u到v的路径长度。\n                d[v] := d[u] + w(u,v)  // 更新路径长度到更小的那个和值。\n</code></pre>\n<h1 id=\"a\">A*<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#a\"></a></h1>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/400115e9-30f7-4a13-9776-db059bc9cd42\">Algo (my_note)</a></li>\n</ul>","noteIndex":{"id":"0f1b48c7-3a25-4016-83a5-15864d7803ad","title":"Development","vault":{"fsPath":"repos/dendron-aws-vault","remote":{"type":"git","url":"https://github.com/cczhong11/my_note.git"},"name":"my_note"},"type":"note","desc":"","links":[{"from":{"fname":"root","id":"c95dc4f5-23db-45e7-a15b-64582a183ccc","vaultName":"my_note"},"type":"backlink","position":{"start":{"line":8,"column":3,"offset":63},"end":{"line":8,"column":21,"offset":81},"indent":[]},"value":"development"}],"anchors":{},"fname":"development","updated":1618381238346,"created":1612940782409,"parent":null,"children":["400115e9-30f7-4a13-9776-db059bc9cd42","xsX5v3ZsyJ0i6gf9","1bc3b45a-b6f4-4150-87d3-5bd5b6eb8c24","6cea4852-6e7c-4140-b476-85c07b48a642","a40ef849-d301-4d74-a778-e6d9469dfb5d","09d9081f-3dff-453d-8488-7d2344cc8895","p11phg7nb10yw0wck1fyagq","92917ea3-452e-48dc-875e-5cd0002041db","2e151826-cb22-4d89-8ce0-71dad7204ce8","baa39444-0da9-4c55-8df7-2a6f8f787fa4","q4um3bc3st86ilkkvdjom6x","62daf50d-a39e-463f-aabd-be53790281fd","3524d0a7-be73-45d6-847e-c970f5c1c760","eac0f243-05b3-4b95-bec3-848e33edbc40","ubbcds8vm331to6kyei2kwk"],"data":{},"custom":{"nav_order":0,"permalink":"/"},"body":"\n","contentHash":"38357962f5a50c6fd7d318dfa66bea90"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"previewV2Enabled":false,"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.90.0","vaults":[{"fsPath":"repos/dendron-aws-vault","remote":{"type":"git","url":"https://github.com/cczhong11/my_note.git"},"name":"my_note"},{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableUserTags":true,"enableHashTags":true,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableEditorDecorations":true,"enableHandlebarTemplates":true,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["development","life"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"my_note","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://notes.tczhong.com","siteFaviconPath":"favicon.ico","siteIndex":"development"}}},"__N_SSG":true}