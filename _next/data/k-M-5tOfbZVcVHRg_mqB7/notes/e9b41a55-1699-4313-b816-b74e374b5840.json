{"pageProps":{"note":{"id":"e9b41a55-1699-4313-b816-b74e374b5840","title":"Index","vault":{"fsPath":"repos/dendron-aws-vault","remote":{"type":"git","url":"https://github.com/cczhong11/my_note.git"},"name":"my_note"},"type":"note","desc":"","links":[],"anchors":{"index":{"type":"header","value":"index","line":8,"column":0},"b-tree":{"type":"header","value":"b-tree","line":14,"column":0},"other-index":{"type":"header","value":"other-index","line":35,"column":0}},"fname":"development.database.index","updated":1618206012886,"created":1616736290095,"parent":"a40ef849-d301-4d74-a778-e6d9469dfb5d","children":[],"data":{},"custom":{},"contentHash":"2fcc451ebdc2bc645026ab76027f7a4d"},"body":"<h1 id=\"index\">Index<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#index\"></a></h1>\n<h1 id=\"index-1\">index<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#index-1\"></a></h1>\n<p>In order to efficiently find the value for a particular key in the database, we need a different data structure: an index</p>\n<p>A table index is a <strong>replica of a subset</strong> of a table's columns that are organized and/or sorted for efficient access using a subset of those column</p>\n<h2 id=\"b-tree\">B+ tree<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#b-tree\"></a></h2>\n<ul>\n<li>b+ tree:\n<ul>\n<li><strong>self-balancing</strong> tree data structure that keeps data sorted and allows searches, sequential access, insertions, and deletions in O(log n).</li>\n<li>m-way search tree: every leaf node is at the same depth</li>\n<li>every node with m/2+1 &#x3C;= k &#x3C;= m keys, k keys, k+1 child</li>\n<li>|link(&#x3C; k )|key1|link( &#x3C; k2 )|key2|link3( >= k2)|...</li>\n<li>node is an array of key/value pairs, key is column, value differ based on whether the node is classified as inner nodes or leaf nodes.</li>\n<li>only stores values in leaf nodes. Inner nodes only guide the search process.</li>\n</ul>\n</li>\n<li>B+TREE DESIGN CHOICES\n<ul>\n<li>node size</li>\n<li>Merge Threshold : maybe delay merge operation</li>\n<li>Variable Length Keys : </li>\n<li>Non-Unique Indexes : </li>\n<li>Intra-Node Search: binary search </li>\n</ul>\n</li>\n<li>optimization:\n<ul>\n<li>prefix compression: store prefix and only store defferent substring, leaf node</li>\n<li>suffix truncation: key very different and you only need suffix to see which key to go left or right, inner node</li>\n<li>bulk insert</li>\n<li>POINTER SWIZZLING</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"other-index\">other index<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#other-index\"></a></h2>\n<ul>\n<li>skip list\n<ul>\n<li>dynamic order-preserving index use a sorted linked list</li>\n<li><strong>Multiple levels</strong> of linked lists with extra pointers that skip over intermediate nodes.</li>\n<li>To insert a new key, <strong>flip a coin</strong> to decide how many levels to add the new key into. Provides approximate O(log n) search times.</li>\n<li>First logically remove a key from the index by setting a flag to tell threads to ignore.</li>\n<li>Then physically remove the key once we know that no other thread is holding the reference.</li>\n<li>pros\n<ul>\n<li>less space</li>\n<li>no rebalance</li>\n</ul>\n</li>\n<li>cons\n<ul>\n<li>not disk friendly, reverse search not good</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>radix tree\n<ul>\n<li>Represent keys as individual digits. This allows threads to examine prefixes one-by-one instead of comparing entire key.</li>\n<li>可能的问题就是一些不好表示，比如signed int，float</li>\n</ul>\n</li>\n<li>inverted index\n<ul>\n<li>full text search index</li>\n</ul>\n</li>\n</ul>","noteIndex":{"id":"0f1b48c7-3a25-4016-83a5-15864d7803ad","title":"Development","vault":{"fsPath":"repos/dendron-aws-vault","remote":{"type":"git","url":"https://github.com/cczhong11/my_note.git"},"name":"my_note"},"type":"note","desc":"","links":[{"from":{"fname":"root","id":"c95dc4f5-23db-45e7-a15b-64582a183ccc","vaultName":"my_note"},"type":"backlink","position":{"start":{"line":8,"column":3,"offset":63},"end":{"line":8,"column":21,"offset":81},"indent":[]},"value":"development"}],"anchors":{},"fname":"development","updated":1618381238346,"created":1612940782409,"parent":null,"children":["400115e9-30f7-4a13-9776-db059bc9cd42","xsX5v3ZsyJ0i6gf9","1bc3b45a-b6f4-4150-87d3-5bd5b6eb8c24","6cea4852-6e7c-4140-b476-85c07b48a642","a40ef849-d301-4d74-a778-e6d9469dfb5d","09d9081f-3dff-453d-8488-7d2344cc8895","p11phg7nb10yw0wck1fyagq","92917ea3-452e-48dc-875e-5cd0002041db","2e151826-cb22-4d89-8ce0-71dad7204ce8","baa39444-0da9-4c55-8df7-2a6f8f787fa4","q4um3bc3st86ilkkvdjom6x","62daf50d-a39e-463f-aabd-be53790281fd","3524d0a7-be73-45d6-847e-c970f5c1c760","eac0f243-05b3-4b95-bec3-848e33edbc40","ubbcds8vm331to6kyei2kwk"],"data":{},"custom":{"nav_order":0,"permalink":"/"},"body":"\n","contentHash":"38357962f5a50c6fd7d318dfa66bea90"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"previewV2Enabled":false,"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.90.0","vaults":[{"fsPath":"repos/dendron-aws-vault","remote":{"type":"git","url":"https://github.com/cczhong11/my_note.git"},"name":"my_note"},{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableUserTags":true,"enableHashTags":true,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableEditorDecorations":true,"enableHandlebarTemplates":true,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["development","life"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"my_note","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://notes.tczhong.com","siteFaviconPath":"favicon.ico","siteIndex":"development"}}},"__N_SSG":true}