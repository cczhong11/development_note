{"pageProps":{"note":{"id":"310bc708-c6a7-49d2-9c96-e24204aa3771","title":"Nosql","vault":{"fsPath":"repos/dendron-aws-vault","remote":{"type":"git","url":"https://github.com/cczhong11/my_note.git"},"name":"my_note"},"type":"note","desc":"","links":[],"anchors":{"nosql":{"type":"header","value":"nosql","line":8,"column":0},"bad":{"type":"header","value":"bad","line":29,"column":0},"good":{"type":"header","value":"good","line":36,"column":0},"cassandra":{"type":"header","value":"cassandra","line":42,"column":0},"partition":{"type":"header","value":"partition","line":57,"column":0},"replication":{"type":"header","value":"replication","line":62,"column":0},"gossip-protocol":{"type":"header","value":"gossip-protocol","line":67,"column":0},"local-persistence":{"type":"header","value":"local-persistence","line":77,"column":0},"hbase":{"type":"header","value":"hbase","line":86,"column":0}},"fname":"development.database.nosql","updated":1620968818406,"created":1616563068672,"parent":"a40ef849-d301-4d74-a778-e6d9469dfb5d","children":[],"data":{},"custom":{},"contentHash":"e41df0033ad2d59110e3acf2ed559947"},"body":"<h1 id=\"nosql\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#nosql\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Nosql</h1>\n<h1 id=\"nosql-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#nosql-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>nosql</h1>\n<p>NoSQL is a non-relational DMS, that does not require a fixed schema, avoids joins, and is easy to scale. </p>\n<p>NoSQL database is used for distributed data stores with humongous data storage needs</p>\n<p>NoSQL databases can be document based, key-value pairs, graph databases.</p>\n<ul>\n<li>horizontally scalable (more machines)</li>\n<li>use dynamic schema for unstructured data.</li>\n</ul>\n<p><img src=\"/assets/images/2021-03-23-23-04-33.png\"></p>\n<p>here are several driving forces behind the adoption of NoSQL databases, including: </p>\n<ul>\n<li>A need for greater <strong>scalability</strong> than relational databases can easily achieve, includ‐ing very large datasets or very high write throughput </li>\n<li>A widespread preference for free and open source software over commercial database products </li>\n<li>Specialized query operations that are not well supported by the relational model </li>\n<li>Frustration with the restrictiveness of relational schemas, and a desire for a <strong>more dynamic and expressive data model</strong></li>\n</ul>\n<h2 id=\"bad\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#bad\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>bad</h2>\n<ul>\n<li>one-to-many structure</li>\n<li>access hard</li>\n<li>hard to keep consistent if many-to-many</li>\n<li>not need join</li>\n</ul>\n<h2 id=\"good\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#good\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>good</h2>\n<p>A document is usually stored as a single continuous string, encoded as JSON, XML, or a binary variant thereof (such as MongoDB’s BSON). If your application often needs to access the entire document (for example, to render it on a web page), there is a performance advantage to this storage locality.</p>\n<p>Schema flexibility in the document model</p>\n<h1 id=\"cassandra\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#cassandra\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>cassandra</h1>\n<p>Setting up Cassandra is quite simple and the maintenance is automatically done. The platform is quite fast even when it is scaled up or a node is added. Cassandra also takes care of re-syncing, balancing or distribution of data. The platform is known to provide high velocity random read writes compared to other NoSQL platforms since it has columnar storage capability and distributed decentralized architecture.</p>\n<p>Flexible Sparse &#x26; Wide Column requirements talk about capability to increase your columns as and when you need. It is suitable only in those cases where secondary index needs are less, which means you have it absolutely de-normalized. In other words all information is available to serve a specific query and does not go across multiple tables to get server specific client query.</p>\n<p>It is important to know that Cassandra is suitable with non-group by kind of models. For applications that have requirement of group-by functionality, Cassandra would not be the right system to choose. This also includes bringing in secondary indexes, which will result into overall performance of system going down.</p>\n<p> very high velocity of random read &#x26; writes &#x26; wide column requirements.</p>\n<p>与BigTable和其模仿者HBase不同，Cassandra的数据并不存储在分布式文件系统如GFS或HDFS中，而是直接存于本地。与BigTable一样，Cassandra也是日志型数据库，即把新写入的数据存储在内存的Memtable中并通过磁盘中的CommitLog来做持久化，内存填满后将数据按照key的顺序写进一个只读文件SSTable中，每次读取数据时将所有SSTable和内存中的数据进行查找和合并。这种系统的特点是写入比读取更快，因为写入一条数据是顺序计入commit log中，不需要随机读取磁盘以及搜索。</p>\n<p>集群没有master的概念，所有节点都是同样的角色，彻底避免了整个系统的单点问题导致的不稳定性，集群间的状态同步通过Gossip协议来进行P2P的通信。每个节点都把数据存储在本地，每个节点都接受来自客户端的请求。每次客户端随机选择集群中的一个节点来请求数据，对应接受请求的节点将对应的key在一致性哈希的环上定位是哪些节点应该存储这个数据，将请求转发到对应的节点上，并将对应若干节点的查询反馈返回给客户端。</p>\n<p>在一致性、可用性和分区耐受能力（CAP）的折衷问题上，Cassandra和Dynamo一样比较灵活。Cassandra的每个keyspace可配置一行数据会写入多少个节点(设这个数为N)，来保证数据不因为机器宕机或磁盘损坏而丢失数据，即保证了CAP中的P。用户在读写数据时可以指定要求成功写到多少个节点才算写入成功(设为W)，以及成功从多少个节点读取到了数据才算成功(设为R)。可推理得出，当W+R>N时，读到的数据一定是上一次写入的，即维护了强一致性，确保了CAP中的C。当W+R&#x3C;=N时，数据是最终一致性因为存在一段时间可能读到的并不是最新版的数据。当W=N或R=N时，意味着系统只要有一个节点无响应或宕机，就有一部分数据无法成功写或者读，即失去了CAP中的可用性A。因此，大多数系统中，都将N设为3，W和R设为QUORUM，即“过半数”——在N为3时QUORUM是2。</p>\n<h2 id=\"partition\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#partition\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>partition</h2>\n<ul>\n<li>ring techonology.</li>\n<li>hash round off</li>\n<li>hash value used assign key to nodes</li>\n</ul>\n<h2 id=\"replication\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#replication\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>replication</h2>\n<ul>\n<li>rack unware: data at next N-1</li>\n<li>rack aware: use zookeeper to choose a leader to tell nodes the range they replica for</li>\n<li>datacenter aware: datacenter level</li>\n</ul>\n<h2 id=\"gossip-protocol\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#gossip-protocol\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>gossip protocol</h2>\n<ul>\n<li>Periodic, Pairwise, inter-node communication.</li>\n<li>Random selection of peers.</li>\n<li>Example – Node A wish to search for pattern in data\n<ul>\n<li>Round 1 – Node A searches locally and then gossips with node B. </li>\n<li>Round 2 – Node A,B gossips with C and D.</li>\n<li>Round 3 – Nodes A,B,C and D gossips with 4 other nodes ......</li>\n</ul>\n</li>\n<li>Round by round doubling makes protocol very robust.</li>\n</ul>\n<h2 id=\"local-persistence\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#local-persistence\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Local Persistence</h2>\n<ul>\n<li>Write operations happens in 2 steps\n<ul>\n<li>Write to commit log in local disk of the node</li>\n<li>Update in-memory data structure.</li>\n</ul>\n</li>\n<li>Read operation\n<ul>\n<li>Looks up in-memory ds first before looking up files on disk.</li>\n<li>Uses Bloom- Filter (summarization of keys in file store in memory) to avoid looking up files that do not contain the key.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"hbase\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#hbase\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>HBase</h1>\n<p>HBase是Apache Hadoop项目的一个子项目，是Google BigTable的一个克隆，与Cassandra一样，它们都使用了BigTable的列族式的数据模型，但是：</p>\n<p>Cassandra只有一种节点，而HBase有多种不同角色，除了处理读写请求的region server之外，其架构在一套完整的HDFS分布式文件系统之上，并需要ZooKeeper来同步集群状态，部署上Cassandra更简单。\nCassandra的数据一致性策略是可配置的，可选择是强一致性还是性能更高的最终一致性；而HBase总是强一致性的。\nCassandra通过一致性哈希来决定一行数据存储在哪些节点，靠概率上的平均来实现负载均衡；而HBase每段数据(region)只有一个节点负责处理，由master来动态分配一个region是否大到需要拆分成两个，同时会将过热的节点上的一些region动态的分配给负载较低的节点，因此实现动态的负载均衡。\n因为每个region同时只能有一个节点处理，一旦这个节点无响应，在系统将这个节点的所有region转移到其他节点之前这些数据便无法读写，加上master也只有一个节点，备用master的恢复也需要时间，因此HBase在一定程度上有单点问题；而Cassandra无单点问题。\nCassandra的读写性能优于HBase[17]。</p>","noteIndex":{"id":"0f1b48c7-3a25-4016-83a5-15864d7803ad","title":"Development","vault":{"fsPath":"repos/dendron-aws-vault","remote":{"type":"git","url":"https://github.com/cczhong11/my_note.git"},"name":"my_note"},"type":"note","desc":"","links":[{"from":{"fname":"root","vaultName":"my_note"},"type":"backlink","position":{"start":{"line":8,"column":3,"offset":63},"end":{"line":8,"column":21,"offset":81},"indent":[]},"value":"development","alias":"开发"}],"anchors":{},"fname":"development","updated":1618381238346,"created":1612940782409,"parent":null,"children":["400115e9-30f7-4a13-9776-db059bc9cd42","xsX5v3ZsyJ0i6gf9","1bc3b45a-b6f4-4150-87d3-5bd5b6eb8c24","6cea4852-6e7c-4140-b476-85c07b48a642","a40ef849-d301-4d74-a778-e6d9469dfb5d","09d9081f-3dff-453d-8488-7d2344cc8895","92917ea3-452e-48dc-875e-5cd0002041db","2e151826-cb22-4d89-8ce0-71dad7204ce8","baa39444-0da9-4c55-8df7-2a6f8f787fa4","62daf50d-a39e-463f-aabd-be53790281fd","3524d0a7-be73-45d6-847e-c970f5c1c760","eac0f243-05b3-4b95-bec3-848e33edbc40"],"data":{},"custom":{"nav_order":0,"permalink":"/"},"body":"\n","contentHash":"38357962f5a50c6fd7d318dfa66bea90"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"previewV2Enabled":false,"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{}},"workspace":{"dendronVersion":"0.85.0","vaults":[{"fsPath":"repos/dendron-aws-vault","remote":{"type":"git","url":"https://github.com/cczhong11/my_note.git"},"name":"my_note"},{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableUserTags":true,"enableHashTags":true,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableEditorDecorations":true},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["development","life"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://notes.tczhong.com","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"writeStubs":false,"seo":{"title":"my_note","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"siteFaviconPath":"favicon.ico","siteIndex":"development"}}},"__N_SSG":true}